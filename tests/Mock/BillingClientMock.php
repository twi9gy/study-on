<?php


namespace App\Tests\Mock;

use App\Entity\Course;
use App\Exception\BillingAuthException;
use App\Security\User;
use App\Service\BillingClient;
use App\Service\DecodeJwt;
use Symfony\Component\Serializer\SerializerInterface;

class BillingClientMock extends BillingClient
{
    public function auth(string $request): array
    {
        // Получаем запрос.
        $data = json_decode($request, true);
        // Если в запресе указан пользователь test, то отдаем токен.
        if ($data['username'] === 'test@gmail.com' && $data['password'] === 'general_user') {
            return [
                'token' => $this->generateToken('test@gmail.com'),
                'username' => 'test@gmail.com',
                'roles' => ["ROLE_USER"],
                'refresh_token' => '23123'
            ];
        }
        // Если в запресе указан администратор admin, то отдаем токен.
        if ($data['username'] === 'admin@gmail.com' && $data['password'] === 'super_admin') {
            return [
                'token' => $this->generateToken('admin@gmail.com'),
                'username' => 'admin@gmail.com',
                'roles' => ["ROLE_SUPER_ADMIN", "ROLE_USER"],
                'refresh_token' => '23123'
            ];
        }
        // иначе вызываем исключение билинга. Это тождественно тому, что сервис не нашел пользователя.
        throw new BillingAuthException('Пользователь не найден.');
    }

    public function register(string $request): array
    {
    }

    public function refreshUser(string $refresh_token): array
    {
        return parent::refreshUser($refresh_token); // TODO: Change the autogenerated stub
    }

    public function getCurrentUser(User $user, DecodeJwt $decodeJwt, SerializerInterface $serializer): array
    {
        // Формируем ответ
        $response = [
            'username' => null,
            'balance' => null
        ];

        if ($user->getUsername() === 'test@gmail.com') {
            $response['username'] = 'test@gmail.com';
            $response['balance'] = 10;
        } elseif ($user->getUsername() === 'admin@gmail.com') {
            $response['username'] = 'test@gmail.com';
            $response['balance'] = 100;
        }

        return $response;
    }

    private function generateToken(string $username): string
    {
        $roles = null;
        if ($username === 'test@gmail.com') {
            $roles = ['ROLE_USER'];
        } elseif ($username === 'admin@gmail.com') {
            $roles = ["ROLE_SUPER_ADMIN", "ROLE_USER"];
        }
        $dataPayload = [
            'username' => $username,
            'roles' => $roles,
            'exp' => (new \DateTime('+ 1 hour'))->getTimestamp(),
        ];
        $payload = base64_encode(json_encode($dataPayload));
        return 'header.' . $payload . '.signature';
    }

    public function getCourses(User $user): array
    {
        return [
            [
                'code' => 'Introduction-to-Data-Analysis-and-Machine-Learning',
                'type' => 'rent',
                'cost' => 100,
            ],
            [
                'code' => 'Sport-Manager',
                'type' => 'rent',
                'cost' => 300,
            ],
            [
                'code' => 'Business-Analyst',
                'type' => 'rent',
                'cost' => 50,
            ],
            [
                'code' => 'Sketching-Basics',
                'type' => 'rent',
                'cost' => 275,
            ],
            [
                'title' => 'Веб-дизайнер.',
                'code' => 'Web-Designer',
                'type' => 'free',
            ],
            [
                'code' => 'Protection-of-rights',
                'type' => 'free',
            ],
            [
                'code' => 'Internet-Marketer',
                'type' => 'buy',
                'cost' => 500,
            ],
            [
                'code' => 'Adobe-Photoshop',
                'type' => 'buy',
                'cost' => 350,
            ],
            [
                'code' => 'Financial-management',
                'type' => 'buy',
                'cost' => 50,
            ],
        ];
    }

    public function getCourse(User $user, Course $course): array
    {
        if ($course->getCode() === 'Introduction-to-Data-Analysis-and-Machine-Learning') {
            return [
                'code' => 'Introduction-to-Data-Analysis-and-Machine-Learning',
                'type' => 'rent',
                'price' => 100
            ];
        }

        if ($course->getCode() === 'Web-Designer') {
            return [
                'code' => 'Web-Designer',
                'type' => 'free'
            ];
        }

        if ($course->getCode() === 'Internet-Marketer') {
            return [
                'code' => 'Internet-Marketer',
                'type' => 'buy',
                'price' => 500
            ];
        }

        if ($course->getCode() === 'Business-Analyst') {
            return [
                'code' => 'Business-Analyst',
                'type' => 'rent',
                'price' => 50
            ];
        }

        if ($course->getCode() === 'Sport-Manager') {
            return [
                'code' => 'Sport-Manager',
                'type' => 'rent',
                'price' => 300
            ];
        }

        if ($course->getCode() === 'Sketching-Basics') {
            return [
                'code' => 'Sketching-Basics',
                'type' => 'rent',
                'price' => 275
            ];
        }

        if ($course->getCode() === 'Protection-of-rights') {
            return [
                'code' => 'Protection-of-rights',
                'type' => 'free'
            ];
        }

        if ($course->getCode() === 'Adobe-Photoshop') {
            return [
                'code' => 'Adobe-Photoshop',
                'type' => 'buy',
                'price' => 350
            ];
        }

        if ($course->getCode() === 'Financial-management') {
            return [
                'code' => 'Financial-management',
                'type' => 'buy',
                'price' => 50
            ];
        }

        return [];
    }

    public function getUserCourses(User $user): array
    {
        return [
            [
                'code' => 'Business-Analyst',
                'cost' => 50,
                'type' => 'rent',
                'expires_at' => (new \DateTime())->modify('+5 day')->format('Y-m-d H:i')
            ],
            [
                'code' => 'Internet-Marketer',
                'cost' => 500,
                'type' => 'buy'
            ],
            [
                'code' => 'Sketching-Basics',
                'cost' => 275,
                'type' => 'rent',
                'expires_at' => (new \DateTime())->modify('+3 day')->format('Y-m-d H:i')
            ],
            [
                'code' => 'Adobe-Photoshop',
                'cost' => 350,
                'type' => 'buy'
            ]
        ];
    }

    public function paymentCourse(User $user, Course $course): array
    {
        return [
            'success' => true,
            'course_type' => 'rent',
            'expires_at' => (new \DateTime())->modify('+7 day')
        ];
    }

    public function getTransactions(User $user): array
    {
        return [
            [
                'id' => 18,
                'created_at' => (new \DateTime())->modify('-3 day'),
                'type' => 'deposit',
                'amount' => 1000
            ],
            [
                'id' => 20,
                'created_at' => (new \DateTime())->modify('-2 day'),
                'skip_expired' => (new \DateTime())->modify('+5 day'),
                'type' => 'payment',
                'course_code' => 'Business-Analyst',
                'amount' => 50
            ],
            [
                'id' => 22,
                'created_at' => (new \DateTime())->modify('-12 day'),
                'skip_expired' => (new \DateTime())->modify('-7 day'),
                'type' => 'payment',
                'course_code' => 'Introduction-to-Data-Analysis-and-Machine-Learning',
                'amount' => 100
            ],
            [
                'id' => 24,
                'created_at' => (new \DateTime())->modify('-15 day'),
                'skip_expired' => (new \DateTime())->modify('-10 day'),
                'type' => 'payment',
                'course_code' => 'Sport-Manager',
                'amount' => 300
            ],
            [
                'id' => 26,
                'created_at' => (new \DateTime())->modify('-1 day'),
                'skip_expired' => (new \DateTime())->modify('+6 day'),
                'type' => 'payment',
                'course_code' => 'Sketching-Basics',
                'amount' => 275
            ],
            [
                'id' => 28,
                'created_at' => (new \DateTime())->modify('-1 day'),
                'type' => 'payment',
                'course_code' => 'Internet-Marketer',
                'amount' => 500
            ],
            [
                'id' => 30,
                'created_at' => (new \DateTime())->modify('-2 day'),
                'type' => 'payment',
                'course_code' => 'Adobe-Photoshop',
                'amount' => 350
            ],
        ];
    }

    public function createCourse(User $user, string $request): array
    {
        return ['success' => true];
    }

    public function editCourse(User $user, string $code, string $request): array
    {
        return ['success' => true];
    }
}
